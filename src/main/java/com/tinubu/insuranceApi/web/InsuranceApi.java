/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tinubu.insuranceApi.web;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-10T13:55:12.660219+02:00[Europe/Paris]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "insurance", description = "the insurance API")
public interface InsuranceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /insurance : Create a new insurance policy
     *
     * @param insuranceDto Create a new insurance policy (optional)
     * @return Insurance was created (status code 201)
     * or Internal server error (status code 500)
     */
    @Operation(
            operationId = "createInsurance",
            summary = "Create a new insurance policy",
            tags = {"insurance"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Insurance was created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CreateInsurance201ResponseDto.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/insurance",
            produces = {"application/json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<CreateInsurance201ResponseDto> createInsurance(
            @Parameter(name = "InsuranceDto", description = "Create a new insurance policy") @Valid @RequestBody(required = false) InsuranceDto insuranceDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /insurance/{insuranceId} : Retrieve an insurance policy
     *
     * @param insuranceId ID of the insurance policy that needs to be updated (required)
     * @return successful operation (status code 200)
     * or Insurance was not found (status code 404)
     * or Internal server error (status code 500)
     */
    @Operation(
            operationId = "getInsurance",
            summary = "Retrieve an insurance policy",
            tags = {"insurance"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = InsuranceDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Insurance was not found"),
                    @ApiResponse(responseCode = "500", description = "Internal server error")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/insurance/{insuranceId}",
            produces = {"application/json"}
    )

    default ResponseEntity<InsuranceDto> getInsurance(
            @Parameter(name = "insuranceId", description = "ID of the insurance policy that needs to be updated", required = true, in = ParameterIn.PATH) @PathVariable("insuranceId") UUID insuranceId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"id\" : \"018ff832-3280-7dbc-a426-82a0148ee390\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"active\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /insurance : Retrieve all insurance policies
     *
     * @return A list of all insurance policies (status code 200)
     * or Internal server error (status code 500)
     */
    @Operation(
            operationId = "getInsurances",
            summary = "Retrieve all insurance policies",
            tags = {"insurance"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "A list of all insurance policies", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = InsuranceDto.class)))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/insurance",
            produces = {"application/json"}
    )

    default ResponseEntity<List<InsuranceDto>> getInsurances(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"id\" : \"018ff832-3280-7dbc-a426-82a0148ee390\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"active\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"id\" : \"018ff832-3280-7dbc-a426-82a0148ee390\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"active\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /insurance/{insuranceId} : Update a new insurance policy
     *
     * @param insuranceId  ID of the insurance policy that needs to be updated (required)
     * @param insuranceDto Update a new insurance policy with these data (optional)
     * @return Update was successful (status code 200)
     * or Insurance was not found (status code 404)
     * or Internal server error (status code 500)
     */
    @Operation(
            operationId = "updateInsurance",
            summary = "Update a new insurance policy",
            tags = {"insurance"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Update was successful"),
                    @ApiResponse(responseCode = "404", description = "Insurance was not found"),
                    @ApiResponse(responseCode = "500", description = "Internal server error")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/insurance/{insuranceId}",
            consumes = {"application/json"}
    )

    default ResponseEntity<Void> updateInsurance(
            @Parameter(name = "insuranceId", description = "ID of the insurance policy that needs to be updated", required = true, in = ParameterIn.PATH) @PathVariable("insuranceId") UUID insuranceId,
            @Parameter(name = "InsuranceDto", description = "Update a new insurance policy with these data") @Valid @RequestBody(required = false) InsuranceDto insuranceDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
